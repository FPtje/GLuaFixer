module {GLua.AG.PrettyPrint}{}{}

imports
{
import Prelude hiding ((<>))
import Data.List (foldl')
import GLua.AG.AST
import Text.PrettyPrint hiding (parens, brackets, braces)
import GLua.TokenTypes
import Data.Maybe
import Text.Parsec
import Text.Parsec.Error
import Text.ParserCombinators.UU.BasicInstances hiding (pos)
import Debug.Trace
}

include "AST.ag"

{

tok :: MToken -> Doc
tok (MToken _ t) = zeroWidthText . show $ t

printList :: (a -> Doc) -> String -> [a] -> Doc
printList _ _ []       = empty
printList f sep' (e : es) = (f e) <> g es
    where
        g []       = empty
        g (e' : es') = zeroWidthText sep' <> (f e') <> g es'

data IsEmpty = IsEmpty | NonEmpty

fromEmpty :: IsEmpty -> Bool
fromEmpty IsEmpty = True
fromEmpty NonEmpty = False

toEmpty :: Bool -> IsEmpty
toEmpty b = if b then IsEmpty else NonEmpty

data PrettyPrintConfig = PPConfig {
    spaceAfterParens :: Bool,
    spaceAfterBrackets :: Bool,
    spaceAfterBraces :: Bool,
    spaceEmptyParens :: Bool,
    spaceEmptyBraces :: Bool,
    spaceAfterLabel :: Bool,
    spaceBeforeComma :: Bool,
    spaceAfterComma :: Bool,
    semicolons :: Bool,
    cStyle :: Bool,
    removeRedundantParens :: Bool,
    minimizeParens :: Bool,
    assumeOperatorAssociativity :: Bool,
    indentation :: String
}

defaultPPConfig :: PrettyPrintConfig
defaultPPConfig = PPConfig {
    spaceAfterParens = False,
    spaceAfterBrackets = False,
    spaceAfterBraces = False,
    spaceEmptyParens = False,
    spaceEmptyBraces = False,
    spaceAfterLabel = False,
    spaceBeforeComma = False,
    spaceAfterComma = True,
    semicolons = False,
    cStyle = False,
    removeRedundantParens = True,
    assumeOperatorAssociativity = True,
    minimizeParens = False,
    indentation = "    "
}

metaDoc :: Maybe MToken -> Doc
metaDoc (Just m) = zchr ':' <> tok m
metaDoc Nothing  = empty

printVarList :: [(PrefixExp, Maybe MExpr)] -> Doc
printVarList vars = printList pp_prefixexp ", " (map fst vars) <-> zchr '=' <-> printList pp_mexpr ", " (catMaybes . map snd $ vars)

printStats :: [MStat] -> Int -> Doc
printStats [] _ = empty
printStats (x : xs) i = nest (i * 4) (pp_mstat x i) $+$ printStats xs i

printElIfs :: [(MExpr, Block)] -> Int -> Doc
printElIfs [] _ = empty
printElIfs ((e, b) : es) i = zeroWidthText "elseif" <-> pp_mexpr e <-> zeroWidthText "then" $+$ pp_block b i $+$ printElIfs es i

printEls :: Maybe Block -> Int -> Doc
printEls Nothing _ = empty
printEls (Just b) i = zeroWidthText "else" $+$ pp_block b i


renderPos :: LineColPos -> String
renderPos (LineColPos l c _) = "line " ++ show (succ l) ++ ", column " ++ show (succ c)

renderRegion :: Region -> String
renderRegion (Region l r) = renderPos l ++ " - " ++ renderPos r

renderSourcePos :: SourcePos -> String
renderSourcePos sp = "line " ++ (show . succ . sourceLine $ sp) ++ ", column " ++ (show . succ . sourceColumn $ sp)

getMStatPos :: MStat -> String
getMStatPos (MStat p _) = renderRegion p

getAReturnPos :: AReturn -> String
getAReturnPos (AReturn p _) = renderRegion p
getAReturnPos NoReturn = "<unknown>"

getMExprPos :: MExpr -> String
getMExprPos (MExpr p _) = renderRegion p

renderError :: Error LineColPos -> String
renderError (Inserted str pos strs)       = renderPos pos ++ ": Inserted '" ++ str ++ "'." ++ render_expecting strs
renderError (Deleted str pos strs)        = renderPos pos ++ ": Removed '" ++ str ++ "'. " ++render_expecting strs
renderError (Replaced str1 str2 pos strs) = renderPos pos ++ ": Replaced '" ++ str1 ++ "' with '" ++ str2 ++ "' at " ++ renderPos pos ++ render_expecting strs
renderError (DeletedAtEnd str)            = "Deleted '"  ++ str ++ "' at the end of the Lua file because the parser doesn't know what to do with it."

render_expecting :: [String] -> String
render_expecting [a]    = "Parser expected a " ++ a
render_expecting (a:as) = "Parser expected one of [" ++ a ++ concat (map (", " ++) as) ++ "]"
render_expecting []     = "Parser expected nothing"


renderPSError :: ParseError -> String
renderPSError ps = map replNL . showErrorMessages "or" "unknown parse error" "expecting" "unexpected" "end of input" . errorMessages $ ps
    where
        replNL '\n' = ' '
        replNL c = c

-- | Render comments on multiple lines
renderMLComments :: PrettyPrintConfig -> Int -> [MToken] -> Doc
renderMLComments conf ind toks = foldl' ($+$) empty . map (indent conf ind . tok . convertComment conf) $ toks

-- | Render comments, and prefer having them on a single line. It may not print comments on the same
-- line if that would cause a syntax error (e.g. a multiline comment after a single line comment)
renderSLComments :: PrettyPrintConfig -> Int -> [MToken] -> Doc
renderSLComments conf ind toks = foldl' combine empty . map (convertComment conf) $ toks
    where
        combine :: Doc -> MToken -> Doc
        combine acc mt@(MToken _pos t) =
          case t of
            -- Block comments after single line comments cannot be printed on the same line, as that
            -- would cause a syntax error, e.g. in this case:

            -- foo = { -- single line comment
            -- --[[multiline
            -- comment
            -- ]]
            -- }
            -- Make sure in these cases the comment is printed on a new line, rather than on the
            -- same line
            DashBlockComment _depth comment | '\n' `elem` comment ->
              acc $+$ (indent conf ind $ tok mt)
            SlashBlockComment comment | '\n' `elem` comment ->
              acc $+$ (indent conf ind $ tok mt)
            _ -> acc <-> tok mt

convertComment :: PrettyPrintConfig -> MToken -> MToken
convertComment conf (MToken p t) = MToken p $ convert' t
    where
        convert' :: Token -> Token
        convert' = if cStyle conf then cComment else luaComment

        luaComment :: Token -> Token
        luaComment (SlashComment s) = DashComment s
        luaComment (SlashBlockComment s) = DashBlockComment (lastBracket s) s
        luaComment t' = t'

        -- converting /*]*/ would end up in --[[]]] when plainly converted
        -- Deepen the block comment by 1 if that's the case
        lastBracket :: String -> Int
        lastBracket [] = 0
        lastBracket s = if last s == ']' then 1 else 0

        cComment :: Token -> Token
        cComment (DashComment s) = SlashComment s
        cComment (DashBlockComment _ s) = SlashBlockComment s
        cComment t' = t'

-- | Whether there are comments that live within the given region
-- Assumes the comments are sorted.
commentsWithinRegion :: [MToken] -> Region -> Bool
commentsWithinRegion comments region = case comments of
    [] -> False
    (comment : restComments)
        -- If the comment is entirely before the region, look at the next comment
        | mpos comment `before` region -> commentsWithinRegion restComments region
        -- If the comment ends before the end of the region, then it's within the region. If it ends
        -- after, then this comment and all subsequent ones are sure not to be within this region.
        | otherwise -> mpos comment `beforeEnd` region

indent :: PrettyPrintConfig -> Int -> Doc -> Doc
indent conf n = (<>) $ zeroWidthText (concat . replicate n $ indentation conf)

parens :: PrettyPrintConfig -> IsEmpty -> Doc -> Doc
parens conf ie doc = zchr '(' `sep'` doc `sep'` zchr ')'
    where
        sep' :: Doc -> Doc -> Doc
        sep' = if spaceAfterParens conf && (not (fromEmpty ie) || spaceEmptyParens conf) then (<->) else (<>)

brackets :: PrettyPrintConfig -> Doc -> Doc
brackets conf doc = zchr '[' `sep'` doc `sep'` zchr ']'
    where
        sep' :: Doc -> Doc -> Doc
        sep' = if spaceAfterBrackets conf then (<->) else (<>)

braces :: PrettyPrintConfig -> IsEmpty -> Doc -> Doc
braces conf ie doc = zchr '{' `sep'` doc `sep'` zchr '}'
    where
        sep' :: Doc -> Doc -> Doc
        sep' = if spaceAfterBraces conf && (not (fromEmpty ie) || spaceEmptyBraces conf) then (<->) else (<>)

-- Zero width char
zchr :: Char -> Doc
zchr c = zeroWidthText [c]

-- Zero width <+>
infixl 6 <->
(<->) :: Doc -> Doc -> Doc
a <-> b | a == empty = b
        | b == empty = a
        | otherwise  = a <> zchr ' ' <> b

-- Operator levels, where level 1 is the lowest level, and level 8 is the highest one
-- See http://www.lua.org/manual/5.2/manual.html#3.4.7
data OperatorLevel
    -- At the top level, there is no assigned operator level yet. This serves as a bottom value.
    = TopLevelExpression
    | OperatorLevel1
    | OperatorLevel2
    | OperatorLevel3
    | OperatorLevel4
    | OperatorLevel5
    | OperatorLevel6
    | OperatorLevel7
    | OperatorLevel8
    deriving (Eq, Ord)
}


attr AllStuff
    syn pretty :: Doc
    inh indent :: Int
    syn isMultiline use {||} {False} :: Bool -- whether code is printed over multiple lines
    inh ppconf :: PrettyPrintConfig
    syn copy :: self

attr MExpr Expr PrefixExp
    -- The precedence of the nearest operator higher up in an expression tree.
    -- e.g. in `(1 + 2) * 3`, 1 and 2 get the precedence of the +, and 3 gets the precedence of the
    -- *.
    inh parentOperatorPrecedence :: OperatorLevel
    inh parentOperatorAssociative :: Bool
    -- Whether an expression is a literal string, number, table, bool nil or varargs. Defaults and
    -- combines to False, because anything that contains a literal is no longer a literal.
    syn isLiteral use {(\_ _ -> False)} {False} :: Bool

attr ExprStuff BinOp
    -- Operator precedence
    syn precedence use {min} {OperatorLevel8} :: OperatorLevel
    -- Whether all operators in an expression are associative.
    syn isAssociative use {&&} {False} :: Bool

attr Declaration VarsList
    syn varPretty  use {<>} {empty}  :: Doc
    syn exprPretty use {<>} {empty}  :: Doc

attr MaybeMExpr Declaration VarsList
    syn isDefined use {||} {False} :: Bool

attr MStatList MExprList VarsList
    inh isHead :: Bool

attr MStatList
    syn isLast use {||} {True} :: Bool

attr MStat Stat
    inh isLastStatement :: Bool

attr MStat MExprList MExpr Field MElseIf ElseIfList MElse Else Field FieldList ExprSuffixList PFExprSuffix PrefixExp Args
    syn pos :: Region

attr MStatList MExprList FieldList MaybeMExpr Declaration VarsList ExprSuffixList ElseIf MElseIf ElseIfList Else MElse Block MStat Stat AReturn FuncName PrefixExp PFExprSuffix MExpr Expr Args Field BinOp UnOp
    chn comments :: {[MToken]}

attr FieldList
    syn isNil :: Bool

attr Field FieldSep
    syn isSemiColon use {||} {False} :: Bool

attr FieldList Field FieldSep
    -- Some entries of a multiline tables can be put on the same line
    syn canFitOnSameLine use {||} {False} :: Bool

attr Block MStat MStatList AReturn
    syn statementCount use {+} {1} :: Int

attr Block AReturn Stat MStat MStatList
    syn hasBreaking use {||} {False} :: Bool -- whether it contains control flow breaking code (continue/return/break)

attr ElseIfList Else MElse
    syn elsesExist use {||} {False} :: Bool

attr Stat Block MStatList Else MElse Expr
    inh statRegion :: Region

attr MStatList MStat Stat PrefixExp
    -- Long name because of very specific use case:
    -- placing semicolons to prevent ambiguous statements
    syn potentiallyAmbiguousAsStatement use {||} {False} :: Bool

attr MStat Stat
    inh potentiallyAmbiguousAsStatement :: Bool

attr VarsList Declaration MaybeMExpr MExpr Expr
    syn wouldBeAmbiguousIfNextStatementIsExprVar use {||} {False} :: Bool

attr VarsList
    syn isLastDefinedVar :: Bool

sem MStatList
    | Cons
                 lhs.isMultiline = @hd.isMultiline
                 loc.addNewline = if not @tl.isLast && (@hd.isMultiline || @tl.isMultiline) then zchr '\n' else empty
                 lhs.pretty =
                    @loc.prettyCommentsBefore
                    $+$ indent @lhs.ppconf @lhs.indent @hd.pretty
                    <-> @loc.prettyCommentsAfter <> @loc.addNewline
                    $+$ @tl.pretty

                 loc.prettyCommentsBefore = renderMLComments @lhs.ppconf @lhs.indent (fst @loc.commentsBefore)
                 loc.prettyCommentsAfter = renderSLComments @lhs.ppconf @lhs.indent (fst @loc.commentsAfter)
                 loc.commentsBefore =
                    if @hd.isMultiline
                    then span (\(MToken pos' _) -> pos' `beforeOrOnLine` @hd.pos) @lhs.comments
                    else span (\(MToken pos' _) -> pos' `before`         @hd.pos) @lhs.comments
                 loc.commentsAfter  =
                    if @hd.isMultiline
                    then span (\(MToken pos' _) -> pos' `beforeOrOnLine` @hd.pos) (snd @loc.commentsBefore)
                    else span (\(MToken pos' _) -> pos' `beforeEndLine`  @hd.pos) (snd @loc.commentsBefore)
                 hd.comments = snd @loc.commentsAfter
                 tl.comments = @hd.comments

                 tl.isHead  = False
                 hd.isLastStatement = @tl.isLast
                 hd.potentiallyAmbiguousAsStatement = @tl.potentiallyAmbiguousAsStatement
                 lhs.potentiallyAmbiguousAsStatement = @hd.potentiallyAmbiguousAsStatement
                 lhs.isLast = False
    | Nil        lhs.pretty = @loc.renderedComments
                 lhs.statementCount = 0
                 loc.renderedComments = renderMLComments @lhs.ppconf @lhs.indent $ fst @loc.commentsBeforeEnd
                 --  Don't print any comments if this is an empty MStatList, otherwise the `end`
                 --  keyword may be hidden by the comments printed here.
                 loc.commentsBeforeEnd = if @lhs.isHead then ([], @lhs.comments) else span (\(MToken pos' _tok) -> pos' `beforeEnd` @lhs.statRegion) @lhs.comments
                 lhs.comments = snd @loc.commentsBeforeEnd

sem MStat
    | MStat      lhs.pos    = @pos
                 stat.statRegion = @pos

sem MExprList
    | Cons       lhs.pretty = (if @lhs.isHead then empty else @loc.comma) <> @hd.pretty <> @tl.pretty
                 loc.comma  = (if spaceBeforeComma @lhs.ppconf then zchr ' ' else empty) <> zchr ',' <> (if spaceAfterComma @lhs.ppconf then zchr ' ' else empty)
                 tl.isHead  = False
                 lhs.pos    = @hd.pos `unionRegionsIfNotEmpty` @tl.pos
                 hd.parentOperatorPrecedence = TopLevelExpression
                 hd.parentOperatorAssociative = True
    | Nil        lhs.pretty = empty
                 lhs.pos    = emptyRg

sem FieldList
    | Cons       lhs.pretty = @loc.prettyCommentsBefore $+$ @loc.indentAfterComment (@hd.pretty <-> @loc.prettyCommentsAfter) `@loc.sep` @loc.ind @tl.pretty
                 lhs.canFitOnSameLine = @hd.canFitOnSameLine
                 lhs.isNil  = False
                 lhs.pos = @hd.pos `unionRegionsIfNotEmpty` @tl.pos

                 hd.comments = snd @loc.commentsAfter

                 loc.sep = if @loc.onSameLine then @loc.optionalSpaceAfterSep else ($+$)
                 loc.ind = if @loc.onSameLine then id else indent @lhs.ppconf @lhs.indent
                 loc.onSameLine = (@hd.canFitOnSameLine || @tl.isNil) && null (fst @loc.commentsAfter)

                 loc.optionalSpaceAfterSep = if spaceAfterComma @lhs.ppconf then (<->) else (<>)
                 loc.indentAfterComment = if null $ fst @loc.commentsBefore then id else indent @lhs.ppconf @lhs.indent

                 loc.isMultiline = @hd.isMultiline || @tl.isMultiline

                 loc.prettyCommentsBefore = renderSLComments @lhs.ppconf @lhs.indent (fst @loc.commentsBefore)
                 loc.prettyCommentsAfter = renderSLComments @lhs.ppconf @lhs.indent (fst @loc.commentsAfter)
                 loc.commentsBefore =
                    if @loc.isMultiline then
                        span (\(MToken pos _) -> pos `before` @hd.pos) @lhs.comments
                    else
                        ([], @lhs.comments)

                 loc.commentsAfter  =
                    if @loc.isMultiline then
                        span (\(MToken pos _) -> pos `beforeOrOnLine` @hd.pos) (snd @loc.commentsBefore)
                    else
                        @loc.commentsBefore
    | Nil        lhs.pretty = empty
                 lhs.isNil  = True
                 lhs.canFitOnSameLine = True
                 lhs.pos = emptyRg

sem MaybeMExpr
    | Just
                lhs.pretty = @just.pretty
                lhs.isDefined = True
                just.parentOperatorPrecedence = TopLevelExpression
                just.parentOperatorAssociative = True
    | Nothing
                lhs.pretty = empty
                lhs.isDefined = False

sem Declaration
    | Tuple     lhs.varPretty = @x1.pretty
                lhs.exprPretty = @x2.pretty
                x1.parentOperatorPrecedence = TopLevelExpression
                x1.parentOperatorAssociative = True

sem VarsList
    | Cons      lhs.pretty = @loc.varPretty <-> if @loc.isDefined then zchr '=' <-> @loc.exprPretty else empty
                loc.isDefined = @hd.isDefined || @tl.isDefined
                loc.varPretty = (if @lhs.isHead then empty else @loc.comma) <> @hd.varPretty <> @tl.varPretty
                loc.exprPretty = (if @lhs.isHead || not @hd.isDefined then empty else @loc.comma) <> @hd.exprPretty <> @tl.exprPretty
                loc.comma  = (if spaceBeforeComma @lhs.ppconf then zchr ' ' else empty) <> zchr ',' <> (if spaceAfterComma @lhs.ppconf then zchr ' ' else empty)
                tl.isHead  = False
                loc.isLastDefinedVar = @tl.isLastDefinedVar
                lhs.isLastDefinedVar = @loc.isLastDefinedVar && not @hd.isDefined
                lhs.wouldBeAmbiguousIfNextStatementIsExprVar = @tl.wouldBeAmbiguousIfNextStatementIsExprVar || @loc.isLastDefinedVar && @hd.wouldBeAmbiguousIfNextStatementIsExprVar

    | Nil       lhs.pretty = empty
                lhs.isLastDefinedVar = True

sem ElseIf
    | Tuple     lhs.pretty = zeroWidthText "elseif" <-> @x1.pretty <-> zeroWidthText "then" $+$ @x2.pretty
                x2.indent = @lhs.indent + 1
                x2.statRegion = emptyRg
                x1.parentOperatorPrecedence = TopLevelExpression
                x1.parentOperatorAssociative = True

sem MElseIf
    | MElseIf   lhs.pos = @pos

sem ElseIfList
    | Cons      lhs.pretty = indent @lhs.ppconf @lhs.indent @hd.pretty $+$ @tl.pretty
                lhs.elsesExist = True
                lhs.pos = @hd.pos `unionRegionsIfNotEmpty` @tl.pos
    | Nil       lhs.pretty = empty
                lhs.pos = emptyRg

sem Else
    | Just      lhs.elsesExist = True
    | Nothing   lhs.pretty = empty
                lhs.pos = emptyRg

sem MElse
    | MElse     lhs.pretty = indent @lhs.ppconf @lhs.indent (zeroWidthText "else") <-> @loc.prettyCommentsAfter $+$ @body.pretty
                body.indent = @lhs.indent + 1
                loc.prettyCommentsAfter = renderSLComments @lhs.ppconf @lhs.indent (fst @loc.commentsAfter)
                loc.commentsAfter = span (\(MToken pos _) -> pos `beforeOrOnLine` @pos) @lhs.comments
                lhs.pos = @pos
                body.comments = snd @loc.commentsAfter

sem ExprSuffixList
    | Cons       lhs.pretty = @hd.pretty <> @tl.pretty
                 lhs.pos = @hd.pos `unionRegionsIfNotEmpty` @tl.pos
    | Nil        lhs.pretty = empty
                 lhs.pos = emptyRg

sem AST
    | AST       lhs.pretty = @chunk.pretty $+$ @loc.prettyComments
                loc.prettyComments = renderMLComments @lhs.ppconf @lhs.indent @chunk.comments
                chunk.comments = @comments
                chunk.statRegion = emptyRg

sem Block
    | Block      loc.newl = if @stats.statementCount > 0 && @ret.hasBreaking then zchr '\n' else empty
                 lhs.pretty = @stats.pretty <> @loc.newl $+$ @ret.pretty
                 stats.isHead = True

sem Stat
    | Def        lhs.pretty = @vars.pretty <> @loc.semicolon
                 loc.semicolon = if semicolons @lhs.ppconf || @loc.wouldBeAmbiguous then zchr ';' else empty
                 loc.wouldBeAmbiguous = @lhs.potentiallyAmbiguousAsStatement && @vars.wouldBeAmbiguousIfNextStatementIsExprVar
                 vars.isHead = True
    | LocDef     lhs.pretty = zeroWidthText "local" <-> @vars.pretty <> @loc.semicolon
                 loc.semicolon = if semicolons @lhs.ppconf || @loc.wouldBeAmbiguous then zchr ';' else empty
                 loc.wouldBeAmbiguous = @lhs.potentiallyAmbiguousAsStatement && @vars.wouldBeAmbiguousIfNextStatementIsExprVar
                 vars.isHead = True
    | AFuncCall  lhs.pretty = @fn.pretty <> @loc.semicolon
                 loc.semicolon = if semicolons @lhs.ppconf || @lhs.potentiallyAmbiguousAsStatement then zchr ';' else empty
                 fn.parentOperatorPrecedence = TopLevelExpression
                 fn.parentOperatorAssociative = True
    | ALabel     lhs.pretty = zeroWidthText "::" <> @loc.whitespace <> tok @lbl <> @loc.whitespace <> zeroWidthText "::"
                 loc.whitespace = if spaceAfterLabel @lhs.ppconf then zeroWidthText " " else empty
    | ABreak     lhs.pretty = zeroWidthText "break" <> @loc.semicolon
                 loc.semicolon = if semicolons @lhs.ppconf then zchr ';' else empty
                 lhs.hasBreaking = True
    | AContinue  lhs.pretty = zeroWidthText "continue" <> @loc.semicolon
                 loc.semicolon = if semicolons @lhs.ppconf then zchr ';' else empty
                 lhs.hasBreaking = True
    | AGoto      lhs.pretty = zeroWidthText "goto" <-> tok @lbl <> @loc.semicolon
                 loc.semicolon = if semicolons @lhs.ppconf then zchr ';' else empty
    | ADo
                 lhs.isMultiline = True
                 lhs.pretty = zeroWidthText "do" $+$ @body.pretty $+$ indent @lhs.ppconf @lhs.indent (zeroWidthText "end")
                 body.indent = @lhs.indent + 1
                 lhs.hasBreaking = False
    | AWhile     lhs.isMultiline = True
                 cond.parentOperatorPrecedence = TopLevelExpression
                 cond.parentOperatorAssociative = True
                 lhs.pretty = zeroWidthText "while" <-> @cond.pretty <-> zeroWidthText "do" $+$ @body.pretty $+$ indent @lhs.ppconf @lhs.indent (zeroWidthText "end")
                 body.indent = @lhs.indent + 1
                 lhs.hasBreaking = False
    | ARepeat    lhs.pretty = zeroWidthText "repeat" $+$ @body.pretty $+$ indent @lhs.ppconf @lhs.indent (zeroWidthText "until" <-> @cond.pretty)
                 body.indent = @lhs.indent + 1
                 cond.parentOperatorPrecedence = TopLevelExpression
                 cond.parentOperatorAssociative = True
                 lhs.hasBreaking = False
    | AIf        loc.isMultiline = @cond.isMultiline || @body.isMultiline || @body.statementCount > 1 || @body.statementCount == 1 && not @body.hasBreaking || @elifs.elsesExist || @els.elsesExist
                 loc.singleLinePretty = zeroWidthText "if" <-> @cond.pretty <-> zeroWidthText "then" <-> @body.pretty <-> zeroWidthText "end"
                 loc.multilinePretty  = zeroWidthText "if" <-> @cond.pretty <-> zeroWidthText "then" $+$ @body.pretty $+$ @elifs.pretty $+$ @els.pretty $+$ indent @lhs.ppconf @lhs.indent (zeroWidthText "end")
                 cond.parentOperatorPrecedence = TopLevelExpression
                 cond.parentOperatorAssociative = True
                 body.indent = if @loc.isMultiline then @lhs.indent + 1 else 0
                 body.statRegion = @lhs.statRegion `upto` @elifs.pos `upto` @els.pos
                 lhs.pretty = if @loc.isMultiline then @loc.multilinePretty else @loc.singleLinePretty
                 lhs.hasBreaking = False
    | ANFor      lhs.isMultiline = True
                 loc.step = case @step.copy of
                                MExpr _ (ANumber "1") -> empty
                                _ -> @loc.comma <> @step.pretty
                 lhs.pretty = zeroWidthText "for" <-> tok @var <-> zchr '=' <-> @val.pretty <> @loc.comma <> @to.pretty <> @loc.step <-> zeroWidthText "do" $+$ @body.pretty $+$ indent @lhs.ppconf @lhs.indent (zeroWidthText "end")
                 loc.comma = (if spaceBeforeComma @lhs.ppconf then zchr ' ' else empty) <> zchr ',' <> (if spaceAfterComma @lhs.ppconf then zchr ' ' else empty)
                 val.parentOperatorPrecedence = TopLevelExpression
                 val.parentOperatorAssociative = True
                 to.parentOperatorPrecedence = TopLevelExpression
                 to.parentOperatorAssociative = True
                 step.parentOperatorPrecedence = TopLevelExpression
                 step.parentOperatorAssociative = True
                 body.indent = @lhs.indent + 1
                 lhs.hasBreaking = False
    | AGFor      lhs.isMultiline = True
                 lhs.pretty = zeroWidthText "for" <-> printList tok (render @loc.comma) @vars <-> zeroWidthText "in" <-> @vals.pretty <-> zeroWidthText "do" $+$ @body.pretty $+$ indent @lhs.ppconf @lhs.indent (zeroWidthText "end")
                 body.indent = @lhs.indent + 1
                 loc.comma  = (if spaceBeforeComma @lhs.ppconf then zchr ' ' else empty) <> zchr ',' <> (if spaceAfterComma @lhs.ppconf then zchr ' ' else empty)
                 vals.isHead = True
                 lhs.hasBreaking = False
    | AFunc      lhs.isMultiline = True
                 lhs.pretty = zeroWidthText "function" <-> @name.pretty <> parens @lhs.ppconf @loc.emptyParams (printList tok (render @loc.comma) @args) $+$ @body.pretty $+$ indent @lhs.ppconf @lhs.indent (zeroWidthText "end")
                 loc.emptyParams = toEmpty $ null @args
                 loc.comma  = (if spaceBeforeComma @lhs.ppconf then zchr ' ' else empty) <> zchr ',' <> (if spaceAfterComma @lhs.ppconf then zchr ' ' else empty)
                 body.indent = @lhs.indent + 1
                 lhs.hasBreaking = False
    | ALocFunc   lhs.isMultiline = True
                 lhs.pretty = zeroWidthText "local function" <-> @name.pretty <> parens @lhs.ppconf @loc.emptyParams (printList tok (render @loc.comma) @args) $+$ @body.pretty $+$ indent @lhs.ppconf @lhs.indent (zeroWidthText "end")
                 loc.emptyParams = toEmpty $ null @args
                 loc.comma  = (if spaceBeforeComma @lhs.ppconf then zchr ' ' else empty) <> zchr ',' <> (if spaceAfterComma @lhs.ppconf then zchr ' ' else empty)
                 body.indent = @lhs.indent + 1
                 lhs.hasBreaking = False

sem AReturn
    | AReturn    lhs.pretty = @loc.prettyCommentsBefore $+$ indent @lhs.ppconf @lhs.indent (zeroWidthText "return") <-> @values.pretty <> @loc.semicolon <-> @loc.prettyCommentsAfter
                 loc.isMultiline = @values.isMultiline
                 loc.semicolon = if semicolons @lhs.ppconf then zchr ';' else empty
                 loc.prettyCommentsBefore = renderMLComments @lhs.ppconf @lhs.indent (fst @loc.commentsBefore)
                 loc.prettyCommentsAfter = renderSLComments @lhs.ppconf @lhs.indent (fst @loc.commentsAfter)
                 loc.commentsBefore = if @loc.isMultiline then span (\(MToken pos _) -> pos `before` @pos) @lhs.comments else ([], @lhs.comments)
                 loc.commentsAfter  = if @loc.isMultiline then span (\(MToken pos _) -> pos `beforeOrOnLine` (rgOr @values.pos @pos)) (snd @loc.commentsBefore) else ([], snd @loc.commentsBefore)
                 values.comments = snd @loc.commentsAfter
                 lhs.comments = @values.comments
                 values.isHead = True
                 lhs.hasBreaking = True
    | NoReturn   lhs.pretty = empty
                 lhs.statementCount = 0

sem FuncName
    | FuncName   lhs.pretty = printList tok "." @names <> metaDoc @meta

sem PrefixExp
    | PFVar      lhs.pretty = tok @name <> @suffixes.pretty
                 lhs.isLiteral = False
                 lhs.pos = mpos @name `unionRegionsIfNotEmpty` @suffixes.pos
    | ExprVar    lhs.pretty = (if @loc.noparens then @expr.pretty else parens @lhs.ppconf NonEmpty @expr.pretty) <> @suffixes.pretty
                 lhs.precedence = if @loc.noparens then @expr.precedence else OperatorLevel8
                 lhs.isLiteral = False

                 -- Whether this ExprVar contains another PrefixExp. In this case the parentheses
                 -- can be removed.
                 loc.containsParenthesizedExpr = case @expr.copy of
                                                    MExpr _ (APrefixExpr _) -> True
                                                    _ -> False
                 loc.noparens =
                    -- Parameters are redundant when the first expression below them is also
                    -- parenthesized, when it's a top level expression or when the contents of the
                    -- parentheses are a literal.
                    (removeRedundantParens @lhs.ppconf || minimizeParens @lhs.ppconf) && (@loc.containsParenthesizedExpr || (@lhs.parentOperatorPrecedence == TopLevelExpression || @expr.isLiteral) && length @suffixes.copy == 0) ||
                    -- Parentheses can be minimized when there's no suffix (function call/index) and
                    -- the parent operator's precedence is lower than the child expression's
                    -- precedence OR they are equal and the parent operator is associative. There is
                    -- no check for the child operator being associative (@expr.isAssociative),
                    -- because evaluation order of the child itself does not change when the
                    -- parentheses are removed. Only the order of evaluation between the parent
                    -- operator and the child changes.
                    (minimizeParens @lhs.ppconf && length @suffixes.copy == 0 &&
                        -- Operator has a lower precedence or it has the same precedence and the
                        -- assumeOperatorAssociativity option is set. The assumption of operator
                        -- associativity is that e.g. `a + (b + c)` is equal to `(a + b) + c`. With
                        -- floating point numbers, this does not necessarily hold. See
                        -- https://stackoverflow.com/a/10371890
                        ( @lhs.parentOperatorPrecedence < @expr.precedence
                        || assumeOperatorAssociativity @lhs.ppconf
                        && @lhs.parentOperatorPrecedence == @expr.precedence
                        && @lhs.parentOperatorAssociative
                        )
                    )
                 lhs.potentiallyAmbiguousAsStatement = True

sem PFExprSuffix
    | Call       lhs.pretty = @args.pretty
                 lhs.pos = @args.pos
    | MetaCall   lhs.pretty = zchr ':' <> tok @fn <> @args.pretty
                 lhs.pos = mpos @fn `unionRegionsIfNotEmpty` @args.pos
    | ExprIndex  lhs.pretty = brackets @lhs.ppconf @index.pretty
                 lhs.pos = @index.pos
                 index.parentOperatorPrecedence = TopLevelExpression
                 index.parentOperatorAssociative = True
    | DotIndex   lhs.pretty = zchr '.' <> tok @index
                 lhs.pos = mpos @index

sem MExpr
    | MExpr             lhs.pos    = @pos
                        expr.statRegion = @pos

sem Expr
    | ANil              lhs.pretty = zeroWidthText "nil"
                        lhs.isLiteral = True
    | AFalse            lhs.pretty = zeroWidthText "false"
                        lhs.isLiteral = True
    | ATrue             lhs.pretty = zeroWidthText "true"
                        lhs.isLiteral = True
    | ANumber           lhs.pretty = zeroWidthText @num
                        lhs.isLiteral = True
    | AString           lhs.pretty = tok @str
                        lhs.isLiteral = True
    | AVarArg           lhs.pretty = zeroWidthText "..."
                        lhs.isLiteral = True
    | AnonymousFunc     loc.isMultiline = @body.isMultiline || @body.statementCount > 1 || (@body.statementCount == 1 && not @body.hasBreaking)
                        loc.singleLinePretty = zeroWidthText "function" <> parens @lhs.ppconf @loc.emptyParams (printList tok (render @loc.comma) @pars) <-> @body.pretty <-> zeroWidthText "end"
                        loc.multilinePretty = zeroWidthText "function" <> parens @lhs.ppconf @loc.emptyParams (printList tok (render @loc.comma) @pars) $+$ @body.pretty $+$ indent @lhs.ppconf @lhs.indent (zeroWidthText "end")
                        loc.comma  = (if spaceBeforeComma @lhs.ppconf then zchr ' ' else empty) <> zchr ',' <> (if spaceAfterComma @lhs.ppconf then zchr ' ' else empty)
                        loc.emptyParams = toEmpty $ null @pars
                        body.indent = if @loc.isMultiline then @lhs.indent + 1 else 0
                        lhs.pretty = if @loc.isMultiline then @loc.multilinePretty else @loc.singleLinePretty
    | APrefixExpr       lhs.pretty = @pexpr.pretty
                        lhs.wouldBeAmbiguousIfNextStatementIsExprVar = True
    | ATableConstructor
                        lhs.pretty = if @fields.isMultiline then @loc.prettyMulti else @loc.prettySingle
                        lhs.isMultiline = not $ null $ @fields.copy
                        lhs.isLiteral = True
                        loc.prettyMulti = zchr '{' $+$ indent @lhs.ppconf (@lhs.indent + 1) @fields.pretty $+$ indent @lhs.ppconf @lhs.indent (zchr '}')
                        loc.prettySingle = braces @lhs.ppconf @loc.emptyContents @fields.pretty
                        loc.emptyContents = toEmpty $ null @fields.copy
                        fields.indent = @lhs.indent + (if @fields.isMultiline then 1 else 0)
    | BinOpExpr         lhs.pretty = @left.pretty <-> @op.pretty <-> @right.pretty
                        -- Note: the AST doesn't always represent precedence correctly in
                        -- unparenthesized unary/binary expressions
                        lhs.precedence = min @op.precedence $ min @left.precedence @right.precedence
                        left.parentOperatorPrecedence = @op.precedence
                        right.parentOperatorPrecedence = @op.precedence
                        left.parentOperatorAssociative = @op.isAssociative
                        right.parentOperatorAssociative = @op.isAssociative
    | UnOpExpr          lhs.pretty = @op.pretty <> @right.pretty
                        lhs.precedence = min @right.precedence OperatorLevel7
                        right.parentOperatorPrecedence = OperatorLevel7

sem Args
    | ListArgs  lhs.pretty = parens @lhs.ppconf @loc.emptyParams @args.pretty
                lhs.pos = @args.pos
                loc.emptyParams = toEmpty $ null @args.copy
                args.isHead = True
    | TableArg  lhs.pretty = if @loc.commentsInArgRegion || @arg.isMultiline then @loc.prettyMulti else @loc.prettySingle
                lhs.pos = @arg.pos
                loc.prettyMulti = zchr '{' $+$ indent @lhs.ppconf (@lhs.indent + 1) @arg.pretty $+$ indent @lhs.ppconf @lhs.indent (zchr '}')
                loc.prettySingle = braces @lhs.ppconf @loc.emptyContents @arg.pretty
                loc.commentsInArgRegion = trace (show @arg.pos ++ "\nCOMMENTS: " ++ show @lhs.comments) $ commentsWithinRegion @lhs.comments @arg.pos
                loc.emptyContents = toEmpty $ null @arg.copy
                arg.indent = @lhs.indent + (if @arg.isMultiline then 1 else 0)
    | StringArg lhs.pretty = tok @arg
                lhs.pos = mpos @arg

sem Field
    | ExprField     lhs.pretty = brackets @lhs.ppconf @key.pretty <-> zchr '=' <-> @value.pretty <> @sep.pretty
                    lhs.isMultiline = True
                    lhs.canFitOnSameLine = False
                    lhs.pos = @key.pos `unionRegionsIfNotEmpty` @value.pos
                    key.parentOperatorPrecedence = TopLevelExpression
                    key.parentOperatorAssociative = True
                    value.parentOperatorPrecedence = TopLevelExpression
                    value.parentOperatorAssociative = True
    | NamedField    lhs.pretty = tok @key <-> zchr '=' <-> @value.pretty <> @sep.pretty
                    lhs.isMultiline = True
                    lhs.canFitOnSameLine = False
                    lhs.pos = mpos @key `unionRegionsIfNotEmpty` @value.pos
                    value.parentOperatorPrecedence = TopLevelExpression
                    value.parentOperatorAssociative = True
    | UnnamedField  lhs.pretty = @value.pretty <> @sep.pretty
                    lhs.canFitOnSameLine = @sep.canFitOnSameLine && not @value.isMultiline
                    lhs.pos = @value.pos
                    value.parentOperatorPrecedence = TopLevelExpression
                    value.parentOperatorAssociative = True

sem FieldSep
    | CommaSep      lhs.pretty = (if spaceBeforeComma @lhs.ppconf then zchr ' ' else empty) <> zchr ','
                    lhs.canFitOnSameLine = True
    | SemicolonSep  lhs.pretty = (if spaceBeforeComma @lhs.ppconf then zchr ' ' else empty) <> zchr ';'
                    lhs.isSemiColon = True
                    -- Separate fields with a semicolon on newline
                    -- See https://github.com/FPtje/GLuaFixer/issues/82
                    lhs.canFitOnSameLine = False
                    lhs.isMultiline = True
    | NoSep         lhs.pretty = empty
                    lhs.canFitOnSameLine = True

sem BinOp
    | APlus         lhs.pretty = zeroWidthText "+"
                    lhs.precedence = OperatorLevel5
                    lhs.isAssociative = True
    | BinMinus      lhs.pretty = zeroWidthText "-"
                    lhs.precedence = OperatorLevel5
                    lhs.isAssociative = False
    | AMultiply     lhs.pretty = zeroWidthText "*"
                    lhs.precedence = OperatorLevel6
                    lhs.isAssociative = True
    | ADivide       lhs.pretty = zeroWidthText "/"
                    lhs.precedence = OperatorLevel6
                    lhs.isAssociative = False
    | AModulus      lhs.pretty = zeroWidthText "%"
                    lhs.precedence = OperatorLevel6
                    lhs.isAssociative = False
    | APower        lhs.pretty = zeroWidthText "^"
                    lhs.precedence = OperatorLevel8
                    lhs.isAssociative = False
    | AConcatenate  lhs.pretty = zeroWidthText ".."
                    lhs.precedence = OperatorLevel4
                    lhs.isAssociative = True
    | ALT           lhs.pretty = zeroWidthText "<"
                    lhs.precedence = OperatorLevel3
                    lhs.isAssociative = True
    | ALEQ          lhs.pretty = zeroWidthText "<="
                    lhs.precedence = OperatorLevel3
                    lhs.isAssociative = True
    | AGT           lhs.pretty = zeroWidthText ">"
                    lhs.precedence = OperatorLevel3
                    lhs.isAssociative = True
    | AGEQ          lhs.pretty = zeroWidthText ">="
                    lhs.precedence = OperatorLevel3
                    lhs.isAssociative = True
    | AEq           lhs.pretty = zeroWidthText "=="
                    lhs.precedence = OperatorLevel3
                    lhs.isAssociative = True
    | ANEq          lhs.pretty = zeroWidthText (if cStyle @lhs.ppconf then "!=" else "~=")
                    lhs.precedence = OperatorLevel3
                    lhs.isAssociative = True
    | AAnd          lhs.pretty = zeroWidthText (if cStyle @lhs.ppconf then "&&" else "and")
                    lhs.precedence = OperatorLevel2
                    lhs.isAssociative = True
    | AOr           lhs.pretty = zeroWidthText (if cStyle @lhs.ppconf then "||" else "or")
                    lhs.precedence = OperatorLevel1
                    lhs.isAssociative = True

sem UnOp
    | UnMinus  lhs.pretty = zeroWidthText "-"
    | ANot     lhs.pretty = zeroWidthText (if cStyle @lhs.ppconf then "!" else "not ")
    | AHash    lhs.pretty = zeroWidthText "#"

{

pp_block :: Block -> Int -> Doc
pp_block p i = pretty_Syn_Block (wrap_Block (sem_Block p) (Inh_Block [] i defaultPPConfig emptyRg))

pp_mstat :: MStat -> Int -> Doc
pp_mstat p i = pretty_Syn_MStat (wrap_MStat (sem_MStat p) (Inh_MStat [] i False False defaultPPConfig))

pp_prefixexp :: PrefixExp -> Doc
pp_prefixexp p = pretty_Syn_PrefixExp (wrap_PrefixExp (sem_PrefixExp p) (Inh_PrefixExp [] 0 True TopLevelExpression defaultPPConfig))

pp_pfexprsuffix :: PFExprSuffix -> Doc
pp_pfexprsuffix p = pretty_Syn_PFExprSuffix (wrap_PFExprSuffix (sem_PFExprSuffix p) (Inh_PFExprSuffix [] 0 defaultPPConfig))

pp_field :: Field -> Doc
pp_field p = pretty_Syn_Field (wrap_Field (sem_Field p) (Inh_Field [] 0 defaultPPConfig))

pp_mexpr :: MExpr -> Doc
pp_mexpr p = pretty_Syn_MExpr (wrap_MExpr (sem_MExpr p) (Inh_MExpr [] 0 True TopLevelExpression defaultPPConfig))

prettyprint :: AST -> String
prettyprint p = render $ pretty_Syn_AST (wrap_AST (sem_AST p) (Inh_AST 0 defaultPPConfig))

prettyprintConf :: PrettyPrintConfig -> AST -> String
prettyprintConf conf p = render $ pretty_Syn_AST (wrap_AST (sem_AST p) (Inh_AST 0 conf))

renderBlock        :: Block -> String
renderBlock p      = render $ pretty_Syn_Block (wrap_Block (sem_Block p) (Inh_Block [] 0 defaultPPConfig emptyRg))

renderStat         :: Stat -> String
renderStat p       = render $ pretty_Syn_Stat (wrap_Stat (sem_Stat p) (Inh_Stat [] 0 False False defaultPPConfig emptyRg))

renderMStat         :: MStat -> String
renderMStat p       = render $ pretty_Syn_MStat (wrap_MStat (sem_MStat p) (Inh_MStat [] 0 False False defaultPPConfig))

renderAReturn      :: AReturn -> String
renderAReturn p    = render $ pretty_Syn_AReturn (wrap_AReturn (sem_AReturn p) (Inh_AReturn [] 0 defaultPPConfig))

renderFuncName     :: FuncName -> String
renderFuncName p   = render $ pretty_Syn_FuncName (wrap_FuncName (sem_FuncName p) (Inh_FuncName [] 0 defaultPPConfig))

renderPrefixExp    :: PrefixExp -> String
renderPrefixExp p  = render $ pretty_Syn_PrefixExp (wrap_PrefixExp (sem_PrefixExp p) (Inh_PrefixExp [] 0 True TopLevelExpression defaultPPConfig))

renderExpr         :: Expr -> String
renderExpr p       = render $ pretty_Syn_Expr (wrap_Expr (sem_Expr p) (Inh_Expr [] 0 True TopLevelExpression defaultPPConfig emptyRg))

renderMExpr         :: MExpr -> String
renderMExpr p       = render $ pretty_Syn_MExpr (wrap_MExpr (sem_MExpr p) (Inh_MExpr [] 0 True TopLevelExpression defaultPPConfig))

renderArgs         :: Args -> String
renderArgs p       = render $ pretty_Syn_Args (wrap_Args (sem_Args p) (Inh_Args [] 0 defaultPPConfig))

renderField        :: Field -> String
renderField p      = render $ pretty_Syn_Field (wrap_Field (sem_Field p) (Inh_Field [] 0 defaultPPConfig))

}
