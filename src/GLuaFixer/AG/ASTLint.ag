optpragmas
{
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# LANGUAGE LambdaCase #-}
}

module {GLuaFixer.AG.ASTLint}{}{}

imports
{
import GLua.AG.AST
import qualified GLua.AG.PrettyPrint as PP
import qualified GLua.AG.Token as T
import GLua.TokenTypes
import qualified Data.Set as S
import qualified Data.Map.Strict as M
import Data.Char (isLower, isUpper)
import Data.Maybe
import GLua.Position (LineColPos(..), Region(..))
import GLuaFixer.LintMessage
import GLuaFixer.LintSettings
}
include "../../GLua/AG/AST.ag"
include "../../GLua/AG/Token.ag"

----------------------------------------
--  Helper functions
----------------------------------------
{
warn :: Region -> Issue -> FilePath -> LintMessage
warn pos issue = LintMessage LintWarning pos issue

-- Used in detecting "not (a == b)" kind of things
oppositeBinOp :: BinOp -> Maybe String
oppositeBinOp ALT = Just ">="
oppositeBinOp AGT = Just "<="
oppositeBinOp ALEQ = Just ">"
oppositeBinOp AGEQ = Just "<"
oppositeBinOp ANEq = Just "=="
oppositeBinOp AEq = Just "~="
oppositeBinOp _ = Nothing

-- Checks whether a variable shadows existing variables
checkShadows :: [M.Map String (Bool, Region)] -> MToken -> Maybe (FilePath -> LintMessage)
checkShadows [] _ = Nothing
checkShadows _ (MToken _ (Identifier "_")) = Nothing -- Exception for vars named '_'
checkShadows (scope : scs) mtok' =
    if M.member lbl scope then
      Just $ warn (mpos mtok') $ VariableShadows lbl location
    else
      checkShadows scs mtok'
    where
        lbl = tokenLabel mtok'
        location = snd $ fromMaybe (error "checkShadows fromMaybe") $ M.lookup lbl scope

-- Determines whether a variable is local
-- It is local if it does not exist in any but the topmost (global) scope
-- it may or may not exist in the topmost scope.
isVariableLocal :: [M.Map String (Bool, Region)] -> String -> Bool
isVariableLocal [] _ = False
isVariableLocal [_] _ = False
isVariableLocal (scope : scs) var =
    case M.lookup var scope of
        Just _ -> True
        Nothing -> isVariableLocal scs var


-- Registers a variable as global variable when it hasn't been
-- introduced in any of the visible scopes
registerVariable :: [M.Map String (Bool, Region)] -> Region -> String -> Bool -> [M.Map String (Bool, Region)]
registerVariable [] _ _ _ = error "cannot register top level variable"
registerVariable (scope : []) pos var used =
    [ case M.lookup var scope of
        Just (used', pos') -> M.insert var (used || used', pos') scope
        Nothing -> M.insert var (used, pos) scope
    ] -- global scope
registerVariable (scope : scs) pos var used = case M.lookup var scope of
                                                Just (True, _) -> scope : scs
                                                Just (False, pos') -> M.insert var (used, pos') scope : scs
                                                Nothing -> scope : registerVariable scs pos var used

findSelf :: [MToken] -> Bool
findSelf ((MToken _ (Identifier "self")) : _) = True
findSelf _ = False

data VariableStyle
   = StartsLowerCase
   | StartsUpperCase
   | VariableStyleNeither
   deriving (Eq)

data DeterminedVariableStyle
   = VarStyleNotDetermined
   | VarStyleDetermined !VariableStyle

combineDeterminedVarStyle :: DeterminedVariableStyle -> VariableStyle -> DeterminedVariableStyle
combineDeterminedVarStyle old new = case old of
    VarStyleNotDetermined -> VarStyleDetermined new
    VarStyleDetermined VariableStyleNeither -> VarStyleDetermined new
    _ -> old

determineVariableStyle :: String -> VariableStyle
determineVariableStyle = \case
    [] -> VariableStyleNeither
    (c : _)
        | isLower c -> StartsLowerCase
        | isUpper c -> StartsUpperCase
        | otherwise -> VariableStyleNeither

variableStyleInconsistent :: DeterminedVariableStyle -> VariableStyle -> Bool
variableStyleInconsistent determinedStyle varStyle = case determinedStyle of
    VarStyleNotDetermined -> False
    VarStyleDetermined VariableStyleNeither -> False
    VarStyleDetermined existing -> case varStyle of
        VariableStyleNeither -> False
        _ -> existing /= varStyle

unknownIdentifier :: String
unknownIdentifier = "Unknown identifier"

}

----------------------------------------
--  Attributes
----------------------------------------

attr AllStuff
    inh scopeLevel :: Int
    inh loopLevel :: Int -- In how many scopes of loops we are. Used in checking labels

    -- The style of variables, used for warning about inconsistencies
    chn variableStyle :: DeterminedVariableStyle

attr AllStuff MToken MTokenList
    inh config :: LintSettings
    chn mtokenPos :: {Region} -- The location of the warning

    -- Global variable definitions
    chn globalDefinitions :: {M.Map String [Region]}

    -- Calls to module() make every global definition afterwards
    -- member of the table provided in the first argument of it.
    -- Those things should not register as /real/ global definitions.
    chn isInModule :: Bool
    chn scopes :: {[M.Map String (Bool, Region)]} -- Scopes of variables and parameters
    inh isMeta :: Bool -- whether the current piece of code is within a metafunction definition
    inh funcName :: String -- The last base function name in which a subtree exists

attr Block
    inh isRepeat :: Bool -- Scopes should not be popped and certain errors are not to be thrown when this is the body of a repeat

attr AllStuff MToken MTokenList Token
    syn warnings use {++} {[]} :: {[String -> LintMessage]}
    syn copy :: self
    syn identifier use {const} {unknownIdentifier} :: String -- identifier of the first token

attr Block MStat MStatList AReturn MElse
    syn statementCount use {+} {1} :: Int

attr MToken
    syn mtok :: Token -- The token held by an MToken

attr Field FieldList
    chn fieldNames :: {S.Set Token} -- The field names of a table

attr UnOp
    syn isNegation :: Bool -- Whether this unop is a negation. Used in "not (a == b)" check

attr MExpr Expr PrefixExp MaybeMExpr
    inh isNegation :: Bool

    -- Which variable is being defined by a LocDef statement. Note: Only LocDef!
    -- Not global (Def) statements!
    -- Exception for "unused variable".
    -- Don't register a variable as used in this scenario:
    -- local a = a
    -- It should still register in e.g. this scenario:
    -- local a = run(function() a() end)
    inh varBeingDefined :: {Maybe MToken}

attr MExpr Expr PrefixExp MExprList
    inh inParentheses :: Bool -- Whether an expression is directly between parentheses (used to check double parentheses)
    inh topLevel :: Bool -- Whether a expression is a sub-expression or a top level expression

attr MExpr Expr PrefixExp ExprSuffixList PFExprSuffix
    -- Whether an expression is "simple" (i.e. number, bool, string, variable, table constant, anonymous function)
    syn isSimpleExpression use {&&} {True} :: Bool

attr VarsList Declaration
    inh localDefinition :: Bool

attr PrefixExp
    syn varName :: {Maybe MToken}
    syn hasSuffixes :: Bool
    inh registerVarUse :: Bool

attr FuncName
    syn isMeta :: Bool
    syn hasSuffixes :: Bool

attr ElseIfList Else MElse
    -- Whether there is any kind of "else" or "elseif" in an if
    syn elseExists use {||} {False} :: Bool


attr Stat MStat MStatList Block
    -- Whether this statement represents an if-statement
    -- AND holds no else or elseif bits
    syn isIfStatement use {||} {False} :: Bool

attr PrefixExp MExpr Expr MaybeMExpr
    -- Whether an expression is just a single variable. The Maybe contains the
    -- optional variable name if it is indeed just a single variable
    syn isSingleVar use {const (const Nothing)} {Nothing} :: {Maybe MToken}

---------------------------------------
--  Semantics
---------------------------------------
sem Token
    | Label
        lhs.identifier          = @lbl
    | Identifier
        lhs.identifier          = @ident

sem MToken
    | MToken
        lhs.mtokenPos           = @mpos
        lhs.mtok                = @mtok.copy
        lhs.identifier          = @mtok.identifier
        +warnings               = if not (lint_goto_identifier @lhs.config) || @mtok.identifier /= "goto" then id else
                                    (:) $ warn @mpos GotoAsIdentifier

sem MTokenList MStatList MExprList FieldList VarsList
    | Cons
        lhs.mtokenPos           = @hd.mtokenPos
    | Nil

sem MStatList
    | Cons
    | Nil
        lhs.statementCount      = 0

sem MExprList
    | Cons
        hd.isNegation           = False
        hd.varBeingDefined      = Nothing
    | Nil

sem MaybeMExpr
    | Just
        just.inParentheses      = False
        just.topLevel           = False


sem Declaration
    | Tuple
        lhs.mtokenPos           = @x1.mtokenPos
        lhs.variableStyle       = if @lhs.localDefinition then combineDeterminedVarStyle @lhs.variableStyle @loc.varStyle else @lhs.variableStyle
        x1.isNegation           = False
        x1.registerVarUse       = False
        x1.inParentheses        = False
        x1.topLevel             = False
        x2.isNegation           = False
        x1.varBeingDefined      = Nothing

        x2.varBeingDefined      = if @x1.hasSuffixes || not @lhs.localDefinition then Nothing else @x1.varName

        loc.var                 = tokenLabel . fromMaybe (error "fromMaybe sem Declaration loc.var") $ @x1.varName
        loc.varStyle            = determineVariableStyle @loc.var
        loc.shadowWarning       = do
                                    var <- @x1.varName
                                    if (Just var /= @x2.isSingleVar) then
                                        checkShadows @lhs.scopes var
                                    else Nothing

        x1.scopes               = if @lhs.localDefinition then
                                    M.insert @loc.var (False, @x1.mtokenPos) (head @lhs.scopes) : tail @lhs.scopes
                                   else if isJust @x1.varName then
                                            -- non-local assignments. Register as used when a suffix of them is assigned
                                            registerVariable @lhs.scopes @x1.mtokenPos @loc.var @x1.hasSuffixes
                                        else
                                            @lhs.scopes -- ExprVar assignments don't affect the scope
        +globalDefinitions      = if @lhs.isInModule || @lhs.localDefinition || isVariableLocal @lhs.scopes @loc.var || @x1.hasSuffixes then id else
                                    M.insertWith (++) @loc.var [@x1.mtokenPos]

        +warnings               = if not (lint_shadowing @lhs.config) || not @lhs.localDefinition || isNothing @loc.shadowWarning then id else
                                    (:) . fromMaybe (error "fromMaybe sem Declaration +warnings") $ @loc.shadowWarning
        +warnings               = if not (lint_inconsistentVariableStyle @lhs.config) || not @lhs.localDefinition || not (variableStyleInconsistent @lhs.variableStyle @loc.varStyle) then id else
                                    (:) $ warn @x1.mtokenPos InconsistentVariableNaming

sem AST
    | AST
        chunk.scopes            = M.empty : @lhs.scopes
        chunk.isRepeat          = False

sem Block
    | Block
        stats.scopeLevel        = @lhs.scopeLevel + 1
        loc.maxScopeDepth       = lint_maxScopeDepth @lhs.config
        +warnings               = if @loc.maxScopeDepth == 0 || @lhs.scopeLevel /= @loc.maxScopeDepth then id else
                                    (:) $ warn @stats.mtokenPos ScopePyramids
        loc.deadVars            = M.filterWithKey (\k (b, _) -> not (null k) && head k /= '_' && not b) (head @ret.scopes)
        +warnings               = if not (lint_unusedVars @lhs.config) || @lhs.isRepeat then id else
                                    (++) $ M.foldrWithKey (\k (_, pos) ls -> warn pos (UnusedVariable k) : ls) [] @loc.deadVars
        lhs.scopes              = if @lhs.isRepeat then @ret.scopes else tail @ret.scopes

sem MStat
    | MStat
        lhs.mtokenPos           = @pos
        stat.mtokenPos          = @pos

sem Stat
    | Def
        -- Global definitions never shadow existing bindings
        vars.localDefinition    = False
    | LocDef
        -- Local definitions might shadow existing bindings
        vars.localDefinition    = True
    | AFuncCall
        fn.isNegation           = False
        fn.registerVarUse       = True
        fn.inParentheses        = False
        fn.topLevel             = True
        fn.varBeingDefined      = Nothing
        loc.isModuleCall        = (tokenLabel <$> @fn.varName) == Just "module"
        lhs.isInModule          = @lhs.isInModule || @loc.isModuleCall
    | ALabel
    | ABreak
    | AContinue
    | AGoto
        +warnings               = if not (lint_gotos @lhs.config) || @lhs.loopLevel >= 2 then id else
                                    (:) $ warn @lbl.mtokenPos AvoidGoto
    | ADo
        lhs.isIfStatement       = False
        body.scopes             = M.empty : @lhs.scopes
        body.isRepeat           = False
        +warnings               = if not (lint_emptyBlocks @lhs.config) || @body.statementCount > 0 then id else
                                    (:) $ warn @lhs.mtokenPos EmptyDoBlock
    | AWhile
        lhs.isIfStatement       = False
        body.loopLevel          = @lhs.loopLevel + 1
        cond.isNegation         = False
        cond.inParentheses      = False
        cond.topLevel           = True
        cond.varBeingDefined    = Nothing
        body.isRepeat           = False
        body.scopes             = M.empty : @cond.scopes
        +warnings               = if not (lint_emptyBlocks @lhs.config) || @body.statementCount > 0 then id else
                                    (:) $ warn @lhs.mtokenPos EmptyWhileLoop

    | ARepeat
        lhs.isIfStatement       = False
        body.loopLevel          = @lhs.loopLevel + 1
        cond.isNegation         = False
        cond.inParentheses      = False
        cond.topLevel           = True
        cond.varBeingDefined    = Nothing
        body.isRepeat           = True
        body.scopes             = M.empty : @lhs.scopes
        lhs.scopes              = tail @cond.scopes -- Manually pop off a scope after the condition
        +warnings               = if not (lint_emptyBlocks @lhs.config) || @body.statementCount > 0 then id else
                                    (:) $ warn @lhs.mtokenPos EmptyRepeat
        loc.deadVars            = M.filterWithKey (\k (b, _) -> not (null k) && head k /= '_' && not b) (head @cond.scopes)
        -- +warnings               = if not (lint_unusedVars @lhs.config) then id else
         --                           (++) $ M.foldrWithKey (\k (_, pos) ls -> warn pos (UnusedVariable k) : ls) [] @loc.deadVars

    | AIf
        lhs.isIfStatement       = not @elifs.elseExists && not @els.elseExists
        cond.isNegation         = False
        cond.inParentheses      = False
        cond.topLevel           = True
        cond.varBeingDefined    = Nothing
        body.scopes             = M.empty : @cond.scopes
        body.isRepeat           = False
        elifs.mtokenPos         = @lhs.mtokenPos
        els.mtokenPos           = @lhs.mtokenPos
        loc.ifBlockPos          =
            -- If the if-statement is empty, then the entire region can be used to give the empty-if
            -- warning. If there are elseifs or if there is an else, then go up to the start of
            -- that.
            case (@elifs.elseExists, @els.elseExists) of
                (False, False) -> @lhs.mtokenPos
                (True, _) -> Region (rgStart @lhs.mtokenPos) (rgStart @elifs.mtokenPos)
                (False, True) -> Region (rgStart @lhs.mtokenPos) (rgStart @els.mtokenPos)


        -- Warn for empty if statements
        +warnings               = if not (lint_emptyBlocks @lhs.config) || @body.statementCount > 0 then id else
                                    (:) $ warn @loc.ifBlockPos EmptyIf

        -- Warn for if statements being put as the only statement in another if-statement
        +warnings               = if not (lint_redundantIfStatements @lhs.config) || @body.statementCount /= 1 || not @body.isIfStatement || @elifs.elseExists || @els.elseExists then id else
                                    (:) $ warn @body.mtokenPos DoubleIf
    | ANFor
        lhs.isIfStatement       = False
        body.loopLevel          = @lhs.loopLevel + 1
        val.isNegation          = False
        val.inParentheses       = False
        val.topLevel            = True
        val.varBeingDefined     = Nothing
        to.isNegation           = False
        to.inParentheses        = False
        to.topLevel             = True
        to.varBeingDefined      = Nothing
        body.isRepeat           = False
        step.isNegation         = False
        step.inParentheses      = False
        step.topLevel           = True
        step.varBeingDefined    = Nothing
        body.scopes             = M.singleton @var.identifier (not (lint_unusedLoopVars @lhs.config), @var.mtokenPos) : @step.scopes
        loc.shadowWarning       = checkShadows @lhs.scopes @var.copy
        +warnings               = if not (lint_shadowing @lhs.config) || isNothing @loc.shadowWarning then id else
                                    (:) . fromMaybe (error "fromMaybe ANFor +warnings") $ @loc.shadowWarning
        +warnings               = if not (lint_emptyBlocks @lhs.config) || @body.statementCount > 0 then id else
                                    (:) $ warn @lhs.mtokenPos EmptyFor
    | AGFor
        lhs.isIfStatement       = False
        vals.inParentheses      = True
        vals.topLevel           = True
        body.loopLevel          = @lhs.loopLevel + 1
        body.isRepeat           = False
        -- The variables the for loop introduces
        loc.introduces          = M.fromList $ map (\mt -> (tokenLabel mt, (not (lint_unusedLoopVars @lhs.config), mpos mt))) @vars
        body.scopes             = @loc.introduces : @vals.scopes
        +warnings               = if not (lint_shadowing @lhs.config) then id else
                                    (++) . catMaybes . map (checkShadows @lhs.scopes) $ @vars
        +warnings               = if not (lint_emptyBlocks @lhs.config) || @body.statementCount > 0 then id else
                                    (:) $ warn @lhs.mtokenPos EmptyFor
    | AFunc
        lhs.isIfStatement       = False
        loc.argIdentifiers      = filter (/= MToken emptyRg VarArg) $ @args
        body.isRepeat           = False
        loc.introduces          = (if @loc.isMeta then M.insert "self" (True, @name.mtokenPos) else id) $
                                    M.fromList . map (\mt -> (tokenLabel mt, (not . lint_unusedParameters $ @lhs.config, mpos mt))) $ @loc.argIdentifiers
        body.scopes             = @loc.introduces : (registerVariable @name.scopes @name.mtokenPos @name.identifier True)

        +globalDefinitions      = if @lhs.isInModule || isVariableLocal @lhs.scopes @name.identifier || @name.isMeta || @name.hasSuffixes then id else
                                    M.insertWith (++) @name.identifier [@name.mtokenPos]
        -- Parameter shadowing
        +warnings               = if not (lint_shadowing @lhs.config) then id else
                                    (++) . catMaybes . map (checkShadows @lhs.scopes) $ @loc.argIdentifiers
        loc.isMeta              = @name.isMeta || findSelf @args || @lhs.isMeta
        body.isMeta             = @loc.isMeta
        body.funcName           = @name.identifier
    | ALocFunc
        lhs.isIfStatement       = False
        loc.argIdentifiers      = filter (/= MToken emptyRg VarArg) $ @args
        body.isRepeat           = False
        loc.introduces          = (if @loc.isMeta then M.insert "self" (True, @name.mtokenPos) else id) $ -- self
                                    -- parameters
                                    M.fromList . map (\mt -> (tokenLabel mt, (not . lint_unusedParameters $ @lhs.config, mpos mt))) $ @loc.argIdentifiers
        loc.funcname            = MToken @name.mtokenPos (Identifier @name.identifier)
        loc.passedScopes        = M.insert @name.identifier (False, @name.mtokenPos) (head @name.scopes) : tail @name.scopes
        body.scopes             = @loc.introduces : @loc.passedScopes
        loc.isMeta              = findSelf @args || @lhs.isMeta
        body.isMeta             = @loc.isMeta
        body.funcName           = @name.identifier
        -- Parameter shadowing
        +warnings               = if not (lint_shadowing @lhs.config) then id else
                                    (++) . catMaybes . map (checkShadows @lhs.scopes) $ @loc.argIdentifiers
        -- Function name shadowing
        loc.funcNameShadows     = checkShadows @lhs.scopes @loc.funcname
        +warnings               = if not (lint_shadowing @lhs.config) || isNothing @loc.funcNameShadows then id else
                                    (:) . fromMaybe (error "fromMaybe ALocFunc +warnings") $ @loc.funcNameShadows

sem ElseIfList
    | Cons
        lhs.elseExists          = True
        lhs.mtokenPos =
            Region
                (rgStart @hd.mtokenPos)
                (rgEnd $ if @tl.elseExists then @tl.mtokenPos else @hd.mtokenPos)

sem MElseIf
    | MElseIf
        elif.mtokenPos = @pos
        lhs.mtokenPos = @pos

sem ElseIf
    | Tuple
        x1.isNegation           = False
        x1.inParentheses        = False
        x1.topLevel             = True
        x1.varBeingDefined      = Nothing
        x2.scopes               = M.empty : @x1.scopes
        x2.isRepeat             = False
        +warnings               = if not (lint_emptyBlocks @lhs.config) || @x2.statementCount > 0 then id else
                                    (:) $ warn @lhs.mtokenPos EmptyElseIf

sem MElse
    | MElse
        body.isRepeat           = False
        lhs.mtokenPos           = @pos

sem Else
    | Just
        just.scopes             = M.empty : @lhs.scopes
        lhs.elseExists          = True
        loc.elsePos             = Region (rgStart @just.mtokenPos) (rgEnd @lhs.mtokenPos)
        +warnings               = if not (lint_emptyBlocks @lhs.config) || @just.statementCount > 0 then id else
                                    (:) $ warn @loc.elsePos EmptyElse
sem AReturn
    | AReturn
        values.inParentheses    = True
        values.topLevel         = True
        lhs.mtokenPos           = @pos
    | NoReturn
        lhs.statementCount      = 0

sem FuncName
    | FuncName
        lhs.mtokenPos           = mpos (head @names)
        lhs.identifier          = tokenLabel . head $ @names
        lhs.isMeta              = isJust @meta
        lhs.hasSuffixes         = length @names > 1

sem PrefixExp
    | PFVar
        lhs.mtokenPos           = @name.mtokenPos
        lhs.hasSuffixes         = not . null $ @suffixes.copy
        lhs.isSingleVar         = if null @suffixes.copy then @loc.varName else Nothing
        loc.varName             = Just @name.copy
        -- When using variables, register them. Find out more about the global scope
        -- Also register the usage of variables when this prefixExpr is not part of a declaration
        -- Don't register the usage of a variable when it's directly the variable being defined
        loc.foundVars           = if isJust @lhs.varBeingDefined && @lhs.varBeingDefined == @loc.varName then
                                    -- When coming across a variable that is being defined, assume it comes from a higher scope and register usage there.
                                    -- This assumption doesn't always hold, but when it doesn't another warning (shadowing) should pop up instead
                                    case @lhs.scopes of
                                      deepestScope : otherScopes -> deepestScope : registerVariable otherScopes @name.mtokenPos (show @name.mtok) @lhs.registerVarUse
                                      noScopes -> noScopes
                                  else
                                    registerVariable @lhs.scopes @name.mtokenPos (show @name.mtok) @lhs.registerVarUse

        loc.name                = tokenLabel @name.copy
        name.scopes             = @loc.foundVars
        +warnings               = if not (lint_beginnerMistakes @lhs.config) || @lhs.isMeta || @loc.name /= "self" then id else
                                    (:) $ warn @name.mtokenPos SelfInNonMeta
        +warnings               = if not (lint_beginnerMistakes @lhs.config) || not @lhs.isMeta || @loc.name /= "self" ||
                                  @lhs.funcName /= "ENT" || @suffixes.identifier /= "Entity" then id else
                                    (:) $ warn @name.mtokenPos SelfEntity
        +warnings               = if not (lint_beginnerMistakes @lhs.config) || not @lhs.isMeta || @loc.name /= "self" ||
                                  @lhs.funcName /= "SWEP" || @suffixes.identifier /= "Weapon" then id else
                                    (:) $ warn @name.mtokenPos SelfWeapon
    | ExprVar
        lhs.mtokenPos           = @expr.mtokenPos
        lhs.isSingleVar         = Nothing
        lhs.varName             = Nothing
        lhs.hasSuffixes         = False
        expr.inParentheses      = True
        expr.topLevel           = True
        +warnings               = if lint_redundantParentheses @lhs.config && null @suffixes.copy && (@lhs.inParentheses || (not @lhs.topLevel && @expr.isSimpleExpression))
                                  then (:) $ warn @lhs.mtokenPos UnnecessaryParentheses
                                  else id

sem PFExprSuffix
    | Call
        lhs.isSimpleExpression  = False
    | MetaCall
        lhs.isSimpleExpression  = False
    | ExprIndex
        index.isNegation        = False
        index.inParentheses     = True
        index.topLevel          = True
        index.varBeingDefined   = Nothing
    | DotIndex

sem MExpr
    | MExpr
        lhs.mtokenPos           = @pos
        expr.mtokenPos          = @pos

sem Expr
    | ANil
    | AFalse
    | ATrue
    | ANumber
    | AString
    | AVarArg
        lhs.isSimpleExpression  = False
    | AnonymousFunc
        loc.introduces          = M.fromList $ map (\mt -> (tokenLabel mt, (not . lint_unusedParameters $ @lhs.config, mpos mt))) @pars
        body.scopes             = @loc.introduces : @lhs.scopes
        body.isRepeat           = False
        body.isMeta             = @lhs.isMeta || findSelf @pars
        loc.argIdentifiers      = filter (/= MToken emptyRg VarArg) $ @pars
        -- Parameter shadowing
        +warnings               = if not (lint_shadowing @lhs.config) then id else
                                    (++) . catMaybes . map (checkShadows @lhs.scopes) $ @loc.argIdentifiers
    | APrefixExpr
        pexpr.registerVarUse    = True
    | ATableConstructor
        fields.fieldNames       = S.empty
    | BinOpExpr
        lhs.isSimpleExpression  = False
        left.isNegation         = False
        left.inParentheses      = False
        left.topLevel           = False
        left.varBeingDefined    = Nothing
        right.isNegation        = False
        right.inParentheses     = False
        right.topLevel          = False
        right.varBeingDefined   = Nothing

        -- Wheter someone is doing "not (a == b)" or "not (a ~= b)"
        loc.stupidNegation      = oppositeBinOp @op.copy
        +warnings               = if not (lint_doubleNegations @lhs.config) || not @lhs.isNegation || isNothing @loc.stupidNegation then id else
                                    (:) $ warn @lhs.mtokenPos $ SillyNegation$ fromMaybe (error "fromMaybe sem Expr loc.stupidNegation") @loc.stupidNegation
    | UnOpExpr
        lhs.isSimpleExpression  = False
        right.isNegation        = @op.isNegation
        right.inParentheses     = False
        right.topLevel          = False
        right.varBeingDefined   = Nothing

sem Args
    | ListArgs
        args.inParentheses      = True
        args.topLevel           = True
    | TableArg
        arg.fieldNames          = S.empty
    | StringArg

sem Field
    | ExprField
        lhs.mtokenPos           = @key.mtokenPos
        key.isNegation          = False
        key.inParentheses       = True
        key.topLevel            = True
        key.varBeingDefined     = Nothing
        value.isNegation        = False
        value.inParentheses     = True
        value.topLevel          = True
        value.varBeingDefined   = Nothing
    | NamedField
        loc.mtokenPos           = @key.mtokenPos
        lhs.fieldNames          = S.insert @key.mtok @lhs.fieldNames
        value.varBeingDefined   = Nothing
        value.isNegation        = False
        value.inParentheses     = True
        value.topLevel          = True
        +warnings               = if not (lint_duplicateTableKeys @lhs.config) || not (S.member @key.mtok @lhs.fieldNames) then id else
                                    (:) $ warn @key.mtokenPos $ DuplicateKeyInTable @key.mtok
    | UnnamedField
        value.isNegation        = False
        value.inParentheses     = True
        value.topLevel          = True
        value.varBeingDefined   = Nothing

sem UnOp
    | UnMinus
        lhs.isNegation          = False
    | ANot
        lhs.isNegation          = True
    | AHash
        lhs.isNegation          = False
---------------------------------------
--  Individual functions
---------------------------------------
{
inh_AST :: LintSettings -> Inh_AST
inh_AST conf = Inh_AST {
                config_Inh_AST                  = conf,
                isMeta_Inh_AST                  = False,
                loopLevel_Inh_AST               = 0,
                globalDefinitions_Inh_AST       = M.empty,
                mtokenPos_Inh_AST               = emptyRg,
                scopeLevel_Inh_AST              = 0,
                scopes_Inh_AST                  = [M.empty],
                funcName_Inh_AST                = "",
                isInModule_Inh_AST              = False,
                variableStyle_Inh_AST           = VarStyleNotDetermined
               }

allAttributes :: LintSettings -> AST -> Syn_AST
allAttributes conf p = wrap_AST (sem_AST p) (inh_AST conf)

astWarnings :: LintSettings -> AST -> [String -> LintMessage]
astWarnings conf p = warnings_Syn_AST $ allAttributes conf p

globalDefinitions :: LintSettings -> AST -> M.Map String [Region]
globalDefinitions conf p = globalDefinitions_Syn_AST $ allAttributes conf p
}
