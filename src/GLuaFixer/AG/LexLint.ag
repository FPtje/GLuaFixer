optpragmas
{
{-# OPTIONS_GHC -fno-warn-unused-binds #-}
{-# LANGUAGE CPP #-}
}

module {GLuaFixer.AG.LexLint}
{
    lintWarnings,
    fixedLexPositions
}
{}

imports
{
import Control.Applicative ((<|>))
import Data.List
import GLua.TokenTypes
import GLua.AG.Token
import GLua.Position
import GLuaFixer.LintMessage
import GLuaFixer.LintSettings
}
include "../../GLua/AG/Token.ag"


{

----------------------------------------
--  C-style / Lua-style syntax inconsistencies
----------------------------------------
-- For detecting the usage of Lua/C syntax inconsistently. 'Nothing' means no evidence of the style,
-- and 'Just Region' represents the last place where the style was found to be used.
data SyntaxUsed = SyntaxUsed
    { lastLuaExample :: Maybe Region
    , lastCExample :: Maybe Region
    }
    deriving (Show)

instance Semigroup SyntaxUsed where
    -- Later uses have preference over earlier uses
    (SyntaxUsed l1 c1) <> (SyntaxUsed l2 c2) = SyntaxUsed (l2 <|> l1) (c2 <|> c1)

-- Monoid instance
instance Monoid SyntaxUsed where
    mempty = SyntaxUsed Nothing Nothing

previousSyntaxUsedRegion :: SyntaxUsed -> Maybe Region
previousSyntaxUsedRegion syntaxUsed = case syntaxUsed of
    SyntaxUsed (Just l) (Just c) -> Just $ min l c
    -- There is no previous region if there is no syntax inconsistency
    SyntaxUsed {} -> Nothing

-- | Whether there is evidence of Lua style code
luaUsed :: SyntaxUsed -> Bool
luaUsed (SyntaxUsed (Just _) _) = True
luaUsed _ = False

-- | Whether there is evidence of C style code
cUsed :: SyntaxUsed -> Bool
cUsed (SyntaxUsed _ (Just _)) = True
cUsed _ = False

-- | Quick helper to turn a bool and region into a member for 'SyntaxUsed'
mkSyntax :: Bool -> Region -> Maybe Region
mkSyntax b region = if b then Just region else Nothing

-- | Whether the syntax is consistent
consistent :: SyntaxUsed -> Bool
consistent syntaxUsed = case syntaxUsed of
    SyntaxUsed (Just _) (Just _) -> False
    _ -> True

mTokenWarning :: Region -> Issue -> FilePath -> LintMessage
mTokenWarning pos issue = LintMessage LintWarning pos issue

-- | Shorthand for throwing _two_ warnings when an inconsistency occurs: one at the original place
-- and one at the new place.
warnInconsistency :: SyntaxUsed -> Issue -> [FilePath -> LintMessage] -> [FilePath -> LintMessage]
warnInconsistency syntaxUsed issue messages = case syntaxUsed of
    SyntaxUsed (Just luaRegion) (Just cRegion) ->
        LintMessage LintWarning luaRegion issue :
        LintMessage LintWarning cRegion issue :
        messages
    _ -> messages

-- | Handy function to reset the built up knowledge of 'SyntaxUsed' when it is found to be
-- inconsistent.
resetIfInconsistent :: SyntaxUsed -> SyntaxUsed
resetIfInconsistent syntaxUsed = case syntaxUsed of
    SyntaxUsed (Just {}) (Just {}) -> SyntaxUsed Nothing Nothing
    _ -> syntaxUsed

isSingleChar :: String -> Bool
isSingleChar [] = True
isSingleChar ('\\' : xs) = length xs == 1
isSingleChar (_ : []) = True
isSingleChar _ = False

-- Locate the exact position of trailing whitespace
locateTrailingWhitespace :: LineColPos -> String -> (LineColPos, String)
locateTrailingWhitespace pos (' ' : xs) = (pos, xs)
locateTrailingWhitespace pos ('\t' : xs) = (pos, xs)
locateTrailingWhitespace pos (x : xs) = locateTrailingWhitespace (customAdvanceChr pos x) xs
locateTrailingWhitespace pos [] = (pos, "")

-- Locate the start of a line's indentation in a string of whitespace
indentationStart :: LineColPos -> String -> LineColPos
indentationStart pos = go pos pos
  where
    go :: LineColPos -> LineColPos -> String -> LineColPos
    go _ cur ('\n' : xs) = let next = customAdvanceChr cur '\n' in go next next xs
    go found cur (x : xs) = go found (customAdvanceChr cur x) xs
    go found _ [] = found

endOfTrailingWhitespace :: (LineColPos, String) -> LineColPos
endOfTrailingWhitespace (pos, ('\n' : _)) = pos
endOfTrailingWhitespace (pos, (x : xs)) = endOfTrailingWhitespace (customAdvanceChr pos x, xs)
endOfTrailingWhitespace (pos, []) = pos


}
----------------------------------------
--  Attributes
----------------------------------------
attr MTokenList MToken Token
    syn copy :: self
    inh config :: LintSettings

    syn warnings use {++} {[]} :: {[FilePath -> LintMessage]}

    chn lineCommentSyntax :: SyntaxUsed
    chn multilineCommentSyntax :: SyntaxUsed
    chn notSyntax :: SyntaxUsed
    chn andSyntax :: SyntaxUsed
    chn orSyntax  :: SyntaxUsed
    chn neqSyntax :: SyntaxUsed
    chn strSyntax :: SyntaxUsed
    chn indentation :: SyntaxUsed -- Let's imagine Lua syntax = spaces, C syntax = tabs

    chn nextTokenPos :: LineColPos

attr Token
    inh mpos :: Region

---------------------------------------
--  Semantics
---------------------------------------
sem MTokenList
    | Cons
    | Nil


sem MToken
    | MToken
        loc.mpos = Region @lhs.nextTokenPos @mtok.nextTokenPos
        mtok.mpos = @loc.mpos
        -- Note: the const is here to avoid a "defined but not used" warning in the generated hs
        -- file.
        loc.copy = MToken (const @loc.mpos @mpos) @mtok.copy

sem Token
    | Whitespace
        loc.curTokenPos = @lhs.nextTokenPos
        loc.nextTokenPos = customAdvanceStr @loc.curTokenPos @space

        loc.usesSpaces = mkSyntax (isInfixOf "\n " @space) @loc.indentationRg
        loc.usesTabs = mkSyntax (isInfixOf "\n\t" @space) @loc.indentationRg
        loc.combinedSyntaxUsed = @lhs.indentation <> SyntaxUsed @loc.usesSpaces @loc.usesTabs
        loc.indentation = resetIfInconsistent @loc.combinedSyntaxUsed

        -- Start and end of trailing whitespace
        loc.whitespaceStart = locateTrailingWhitespace @loc.curTokenPos @space
        loc.whitespaceEnd = endOfTrailingWhitespace @loc.whitespaceStart

        -- Start and end of indentation at the start of a line
        loc.indentationRg = Region (indentationStart @loc.curTokenPos @space) @loc.nextTokenPos

        +warnings = if not (lint_trailingWhitespace @lhs.config) || (not (isInfixOf " \n" @space) && not (isInfixOf "\t\n" @space)) then id else (:) $ mTokenWarning (Region (fst @loc.whitespaceStart) @loc.whitespaceEnd) TrailingWhitespace

        +warnings = if not (lint_whitespaceStyle @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed InconsistentTabsSpaces

    | DashComment
        loc.nextTokenPos = customAdvanceToken @lhs.nextTokenPos @loc.copy

        loc.combinedSyntaxUsed = @lhs.lineCommentSyntax <> SyntaxUsed (Just @lhs.mpos) Nothing
        loc.lineCommentSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "--" "//"

    | SlashComment
        loc.nextTokenPos = customAdvanceToken @lhs.nextTokenPos @loc.copy

        loc.combinedSyntaxUsed = @lhs.lineCommentSyntax <> SyntaxUsed Nothing (Just @lhs.mpos)
        loc.lineCommentSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "//" "--"


    | DashBlockComment
        loc.str = showString "--[" . showString (replicate @depth '-') . showChar '[' . showString @comment . showChar ']' . showString (replicate @depth '-') . showChar ']' $ ""
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos @loc.str

        loc.combinedSyntaxUsed = @lhs.multilineCommentSyntax <> SyntaxUsed (Just @lhs.mpos) Nothing
        loc.multilineCommentSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "--[[ ]]" "/* */"

    | SlashBlockComment
        loc.str = showString "/*" . showString @comment . showString "*/" $ ""
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos @loc.str

        loc.combinedSyntaxUsed = @lhs.multilineCommentSyntax <> SyntaxUsed Nothing (Just @lhs.mpos)
        loc.multilineCommentSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "/* */" "--[[ ]]"

    | Semicolon TNumber TTrue TFalse Nil VarArg Plus Minus Multiply Divide Modulus Power TEq TNEq TCNEq TLEQ TGEQ TLT TGT Equals Concatenate Colon Dot Comma Hash Not CNot And CAnd Or COr Function Local If Then Elseif Else For In Do While Until Repeat Continue Break Return End LRound RRound LCurly RCurly LSquare RSquare Identifier
        lhs.nextTokenPos = customAdvanceToken @lhs.nextTokenPos @loc.copy

    | DQString
        -- Apply custom advancement of the string, but also have the advancement take the quotes into account
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos $ "\"" <> @str <> "\""

        loc.combinedSyntaxUsed = @lhs.strSyntax <> SyntaxUsed (Just @lhs.mpos) Nothing
        loc.strSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "double quoted strings" "single quoted strings"

    | SQString
        -- Apply custom advancement of the string, but also have the advancement take the quotes into account
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos $ "'" <> @str <> "'"

        -- Allow single strings containing a single character
        loc.usesSingleQuotedSyntax = if isSingleChar @str then Nothing else Just @lhs.mpos
        loc.combinedSyntaxUsed = @lhs.strSyntax <> SyntaxUsed Nothing @loc.usesSingleQuotedSyntax
        loc.strSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "single quoted strings" "double quoted strings"

    | MLString
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos @str

    | Not
        loc.combinedSyntaxUsed = @lhs.notSyntax <> SyntaxUsed (Just @lhs.mpos) Nothing
        loc.notSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "not" "!"

    | CNot
        loc.combinedSyntaxUsed = @lhs.notSyntax <> SyntaxUsed Nothing (Just @lhs.mpos)
        loc.notSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "!" "not"

    | And
        loc.combinedSyntaxUsed = @lhs.andSyntax <> SyntaxUsed (Just @lhs.mpos) Nothing
        loc.andSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "and" "&&"

    | CAnd
        loc.combinedSyntaxUsed = @lhs.andSyntax <> SyntaxUsed Nothing (Just @lhs.mpos)
        loc.andSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "&&" "and"

    | Or
        loc.combinedSyntaxUsed = @lhs.orSyntax <> SyntaxUsed (Just @lhs.mpos) Nothing
        loc.orSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "or" "||"

    | COr
        loc.combinedSyntaxUsed = @lhs.orSyntax <> SyntaxUsed Nothing (Just @lhs.mpos)
        loc.orSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "||" "or"

    | TNEq
        loc.combinedSyntaxUsed = @lhs.neqSyntax <> SyntaxUsed (Just @lhs.mpos) Nothing
        loc.neqSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "~=" "!="

    | TCNEq
        loc.combinedSyntaxUsed = @lhs.neqSyntax <> SyntaxUsed Nothing (Just @lhs.mpos)
        loc.neqSyntax = resetIfInconsistent @loc.combinedSyntaxUsed
        +warnings = if not (lint_syntaxInconsistencies @lhs.config) then id else
                        warnInconsistency @loc.combinedSyntaxUsed $ SyntaxInconsistency "!=" "~="

    | Label
        lhs.nextTokenPos = customAdvanceStr @lhs.nextTokenPos (show @loc.copy)

{


inh_MTokenList :: LintSettings -> Inh_MTokenList
inh_MTokenList conf =
                 Inh_MTokenList {
                    config_Inh_MTokenList                   = conf,
                    andSyntax_Inh_MTokenList                = mempty,
                    indentation_Inh_MTokenList              = mempty,
                    lineCommentSyntax_Inh_MTokenList        = mempty,
                    multilineCommentSyntax_Inh_MTokenList   = mempty,
                    neqSyntax_Inh_MTokenList                = mempty,
                    notSyntax_Inh_MTokenList                = mempty,
                    orSyntax_Inh_MTokenList                 = mempty,
                    strSyntax_Inh_MTokenList                = mempty,
                    nextTokenPos_Inh_MTokenList             = LineColPos 0 0 0
                 }

lintWarnings        :: LintSettings -> [MToken] -> [String -> LintMessage]
lintWarnings conf p = warnings_Syn_MTokenList (wrap_MTokenList (sem_MTokenList p) (inh_MTokenList conf))

-- Necessary because the parser walks over tabs as though they are 8 spaces.
fixedLexPositions   :: [MToken] -> [MToken]
fixedLexPositions p = copy_Syn_MTokenList (wrap_MTokenList (sem_MTokenList p) (inh_MTokenList defaultLintSettings))
}
